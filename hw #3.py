#!/usr/bin/env python
# coding: utf-8

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∑–∞–¥–∞—á–∏ –æ –ø–ª–∞—Ç–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü–µ, —á—Ç–æ–±—ã –ø–æ–º–∏–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–ª—Å—è –∏ —Å–∞–º –ø—É—Ç—å (–≤ –≤–∏–¥–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤ ‚Äú–æ–¥–Ω–∞ —Å—Ç—É–ø–µ–Ω—å–∫–∞‚Äù, ‚Äú–¥–≤–µ —Å—Ç—É–ø–µ–Ω—å–∫–∏‚Äù).

# In[27]:


a = [1, 2, 3, 4, 5, 6]
S = [a[0], a[1]]
for i in range(2, len(a)):
    S.append(min(S[i-1], S[i-2]) + a[i])
    if S[i-1]+a[i]<S[i-2]+a[i]:
        print("–ü—Ä—ã–≥–∞–µ–º –Ω–∞ 1 —Å—Ç—É–ø–µ–Ω—å–∫—É. –°—Ç–æ–∏–º–æ—Å—Ç—å = ", S[i])
    else:
        print("–ü—Ä—ã–≥–∞–µ–º –Ω–∞ 2 —Å—Ç—É–ø–µ–Ω—å–∫–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å = ", S[i])

print("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç—É–ø–µ–Ω–µ–π = ", S)


# –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ –Ω—É–∫–ª–µ–æ—Ç–∏–¥–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∏ –≤—ã—á–∏—Å–ª—è—é—â—É—é score –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ù–∏–¥–ª–º–∞–Ω–∞-–í—É–Ω—à–∞, –∏—Å–ø–æ–ª—å–∑—É—è –º–∞—Ç—Ä–∏—Ü—É —à—Ç—Ä–∞—Ñ–æ–≤ DNAfull –∏ –ª–∏–Ω–µ–π–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –≥—ç–ø (ùëë= 10). –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –∏–∑ –∑–∞–¥–∞—á–∏ 1.
# –ö –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–∑ –∑–∞–¥–∞—á–∏ 4 –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è.

# In[3]:


import numpy as np

seq1 = 'CTGTCTCCTG'
seq2 = 'ATGAGTCTCT'

# Make matrices

main_matrix = np.zeros((len(seq1)+1, len(seq2)+1))
match_matrix = np.zeros((len(seq1), len(seq2)))

match_score = 5
mismatch_score = -4
d = 10

for i in range(len(seq2)):
    for j in range(len(seq1)):
        if seq2[i] == seq1[j]:
            match_matrix[j][i] = match_score
        else:
            match_matrix[j][i] = mismatch_score
# print (match_matrix)

# Filling first row and column

for i in range(len(seq1)+1):
    main_matrix[i][0] = -d*(i)
for j in range(len(seq2)+1):
    main_matrix[0][j] = -d*(j)

for i in range(1, len(seq1)+1):
    for j in range(1, len(seq2)+1):
        main_matrix[i][j] = max (main_matrix[i-1][j-1]+match_matrix[i-1][j-1],
                                 main_matrix[i-1][j]-d,
                                 main_matrix[i][j-1]-d)
print (main_matrix, '\n')

# Traceback

seq1_align = ''
seq2_align = ''
i_back=len(seq1)
j_back=len(seq2)


while(j_back > 0 and i_back > 0):
    score = main_matrix[i_back][j_back]
    score_diag = main_matrix[i_back-1][j_back-1]
    score_up = main_matrix[i_back-1][j_back]
    score_left = main_matrix[i_back][j_back-1]
    
    if score == score_diag+match_matrix[i_back-1][j_back-1]:
            seq1_align += seq1[i_back-1]
            seq2_align += seq2[j_back-1]
            i_back -=1
            j_back -=1
    elif score == score_up - d:
            seq1_align += seq1[i_back-1]
            seq2_align += '-'
            i_back -=1
    else:
        seq2_align += seq2[j_back-1]
        seq1_align += '-'
        j_back -=1

# As we go from the last symbol

print(seq2_align[::-1])
print(seq1_align[::-1])


# 
